<main id="contact" class="text-sm bg-light2 scroll-mt-28 dark:bg-dark2 sm:text-lg">
	<div class="max-w-5xl mx-auto p-7 flex flex-col justify-start gap-7 sm:p-12">
		<h1 class="text-3xl sm:text-4xl md:text-5xl">Contact Me</h1>

		<form 
			action="https://httpbin.org/post" 
			method="post"
			class="flex flex-col gap-2 text-dark dark:text-light sm:gap-4">

			<div class="w-full flex gap-[inherit] flex-wrap">
				<div class="basis-72 grow">
					<label for="name" class="block text-base sm:text-2xl sm:mb-2">Name<sup>*</sup></label>
					<input type="text" name="name" id="name" placeholder="Enter Name"
						class="w-full py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg sm:px-4 sm:py-2">
					<small class="text-red-400 hidden"></small>
				</div>

				<div class="basis-64 grow">
					<label for="phone" class="block text-base sm:text-2xl sm:mb-2">Phone</label>
					<input type="tel" name="phone" id="phone" placeholder="999-999-9999"
						class="w-full py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg sm:px-4 sm:py-2">
					<small class="text-red-400 hidden"></small>
				</div>
			</div>

			
			<div class="w-full">
				<label for="email" class="block text-base sm:text-2xl sm:mb-2">Email<sup>*</sup></label>
				<input type="text" name="email" id="email" placeholder="Enter Email"
					class="w-full py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg sm:px-4 sm:py-2">
				<small class="text-red-400 hidden"></small>
			</div>

			<div class="w-full">
				<label for="street" class="block text-base sm:text-2xl sm:mb-2">Street<sup>*</sup></label>
				<input type="text" name="street" id="street" placeholder="Enter Street"
					class="w-full py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg sm:px-4 sm:py-2">
				<small class="text-red-400 hidden"></small>
			</div>

			<div class="w-full flex gap-[inherit] flex-wrap">

				<div class="basis-72 grow">
					<label for="city" class="block text-base sm:text-2xl sm:mb-2">City<sup>*</sup></label>
					<input type="text" name="city" id="city" placeholder="Enter City"
					class="
						w-full 
						py-1 
						px-2 
						border-2 
						border-dark 
						bg-inherit 
						transition-[border-radius] 
						dark:border-light 
						focus:outline-none 
						focus:rounded-lg
						sm:px-4 
						sm:py-2
						">
					<small class="text-red-400 hidden"></small>
				</div>

				<div class="basis-72 grow">
					<label for="province" class="block text-base sm:text-2xl sm:mb-2">Province<sup>*</sup></label>
					<input type="text" name="province" id="province" list="provinces" placeholder="Enter Province"
					class="
						w-full 
						py-1 
						px-2 
						border-2 
						border-dark 
						bg-inherit 
						transition-[border-radius] 
						dark:border-light 
						focus:outline-none 
						focus:rounded-lg
						sm:px-4 
						sm:py-2
						">
					<small class="text-red-400 hidden"></small>
					<datalist id="provinces">
						<option value="Ontario">
						<option value="Quebec">
						<option value="Nova Scotia">
						<option value="New Brunswick">
						<option value="Manitoba">
						<option value="British Columbia">
						<option value="Prince Edward Island">
						<option value="Saskatchewan">
						<option value="Alberta">
						<option value="Newfoundland and Labrador">
					</datalist>
				</div>

				<div class="basis-72 grow">
					<label for="postal-code" class="block text-base sm:text-2xl sm:mb-2">Postal Code<sup>*</sup></label>
					<input type="text" name="postal-code" id="postal-code" placeholder="Enter Postal Code"
					class="
						w-full 
						py-1 
						px-2 
						border-2 
						border-dark 
						bg-inherit 
						transition-[border-radius] 
						dark:border-light 
						focus:outline-none 
						focus:rounded-lg
						sm:px-4 
						sm:py-2
						">
					<small class="text-red-400 hidden"></small>
				</div>
			</div>


			<div class="w-full" id="purpose">

				<fieldset>
					<legend class="text-base sm:text-2xl sm:mb-2">Purpose</legend>
					<div class="pl-4">
						<div>
							<input type="radio" name="purpose" id="purpose-school" value="school" checked>
							<label for="purpose-school" class="">School</label>
						</div>
						<div>
							<input type="radio" name="purpose" id="purpose-job" value="job-offer">
							<label for="purpose-job" class="">Job Offer</label>
						</div>
						<div>
							<input type="radio" name="purpose" id="purpose-other" value="other">
							<label for="purpose-other" class="">Other</label>
						</div>
					</div>
				</fieldset>

				<input type="text" name="purpose" id="purpose-other-text" placeholder="Other topic (Must input a value)"
					class="w-full mt-2 py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg hidden sm:px-4 sm:py-2">
				<small class="text-red-400 hidden"></small>

			</div>

			<div class="w-full">
				<label for="message" class="block text-base sm:text-2xl sm:mb-2">Message</label>
				<textarea name="message" id="message" rows="5" placeholder="Say hi..."
					class="w-full py-1 px-2 border-2 border-dark bg-inherit transition-[border-radius] dark:border-light focus:outline-none focus:rounded-lg sm:px-4 sm:py-2"></textarea>
				<small class="text-red-400 hidden"></small>
			</div>

			<div class="flex justify-between">
				<input type="reset" value="Reset" class="px-4 py-2 border-2 border-gray-900 flex items-center gap-2 bg-gray-400/50 text-dark hover:bg-gray-400/25 active:bg-gray-400/25 dark:border-gray-400 dark:text-light dark:hover:bg-gray-400/75 dark:active:bg-gray-400/75">
				<input type="submit" value="Submit" class="px-4 py-2 border-2 border-gray-900 flex items-center gap-2 bg-gray-400/50 text-dark hover:bg-gray-400/25 active:bg-gray-400/25 dark:border-gray-400 dark:text-light dark:hover:bg-gray-400/75 dark:active:bg-gray-400/75">
			</div>

		</form>

	</div>
</main>

<script>

const form = document.querySelector("form") as HTMLFormElement;

const radioBtns = Array.from(document.querySelectorAll("input[type='radio']")) as HTMLInputElement[];
const formInputs = Array.from(document.querySelectorAll("form input")) as HTMLInputElement[];
const errorTags = Array.from(document.querySelectorAll("small")) as HTMLElement[];

const otherRadioBtn = document.getElementById("purpose-other") as HTMLInputElement;
const otherText = document.getElementById("purpose-other-text") as HTMLInputElement;

window.onload = toggleOtherText;
form.onreset = () => {
	const nameInput = document.getElementById("name") as HTMLInputElement;
	 nameInput.scrollIntoView({behavior: "smooth", block: "center"});
	otherText.classList.add("hidden")
	resetErrors();
}; 

radioBtns.forEach(radioBtn => {
	radioBtn.onclick = toggleOtherText;
});

form.onsubmit = (e: Event) => {

	resetErrors();

	let valid = true;
	valid = validateMessage() && valid ? true : false;
	valid = validatePurpose() && valid ? true : false;
	valid = validatePostalCode() && valid ? true : false;
	valid = validateProvince() && valid ? true : false;
	valid = validateCity() && valid ? true : false;
	valid = validateStreet() && valid ? true : false;
	valid = validateEmail() && valid ? true : false;
	valid = phoneIsValid() && valid ? true : false;
	valid = nameIsValid() && valid ? true : false;

	if (!valid) {
		console.log("the data is not valid");
		e.preventDefault()
	}
};

function toggleOtherText() {

	const errorTag = document.querySelector("#purpose-other-text+small") as HTMLElement;
	errorTag.classList.add("hidden");
	otherText.classList.remove("border-red-400", "dark:border-red-400");

	if (otherRadioBtn.checked) {
		otherText.classList.remove("hidden");
	} else {
		otherText.classList.add("hidden");
	}
}

function resetErrors() {
	const messageArea = document.getElementById("message") as HTMLTextAreaElement;
	messageArea.classList.remove("border-red-400", "dark:border-red-400");
	formInputs.forEach(formInput => {
		formInput.classList.remove("border-red-400", "dark:border-red-400");
	});
	errorTags.forEach(errorTag => {
		errorTag.classList.add("hidden");
	});
}

function nameIsValid(): boolean {
	const nameInput = document.getElementById("name") as HTMLInputElement;
	const errorTag = document.querySelector("#name+small") as HTMLElement;
	const name = nameInput.value;
	const nameIsEmpty = name !== "";

	if (!nameIsEmpty) {
	 	 nameInput.classList.add("border-red-400", "dark:border-red-400");
	 	 nameInput.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "Name is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (!nameIsEmpty) console.log("name is not valid");

	return nameIsEmpty;
}

function phoneIsValid(): boolean {
	const phoneInput = document.getElementById("phone") as HTMLInputElement;
	const errorTag = document.querySelector("#phone+small") as HTMLElement;
	const phone = phoneInput.value;
	const validPattern = /^([0-9]{3}[-]){2}[0-9]{4}$/ as RegExp;

	const phoneIsEmpty = phone === "";
	const phoneIsValid = validPattern.test(phone);

	if (!phoneIsEmpty && !phoneIsValid) {
		phoneInput.classList.add("border-red-400", "dark:border-red-400");
		phoneInput.scrollIntoView({behavior: "smooth", block: "center"});
		errorTag.textContent = "Phone number is invalid";
		errorTag.classList.remove("hidden");
	}

	return phoneIsEmpty || (!phoneIsEmpty && phoneIsValid);
}

function validateEmail(): boolean {
	const emailInput = document.getElementById("email") as HTMLInputElement;
	const errorTag = document.querySelector("#email+small") as HTMLElement;
	const email = emailInput.value;
	const validPattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/ as RegExp;

	const emailIsEmpty = email === "";
	const emailIsValid = validPattern.test(email);

	if (emailIsEmpty || !emailIsValid) {
		emailInput.classList.add("border-red-400", "dark:border-red-400");
		emailInput.scrollIntoView({behavior: "smooth", block: "center"});
		if (emailIsEmpty) {
			errorTag.textContent = "Email is required";
		} else if (!emailIsValid) {
			errorTag.textContent = "Email is invalid";
		}
		errorTag.classList.remove("hidden");
	}

	return !emailIsEmpty && emailIsValid;
}

function validateStreet(): boolean {
	const streetInput = document.getElementById("street") as HTMLInputElement;
	const errorTag = document.querySelector("#street+small") as HTMLElement;
	const street = streetInput.value
	const streetIsEmpty = street === "";

	if (streetIsEmpty) {
	 	 streetInput.classList.add("border-red-400", "dark:border-red-400");
	 	 streetInput.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "Street is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (street === "") console.log("street is not valid");
	
	return street !== "";
}

function validateCity(): boolean {
	const cityInput = document.getElementById("city") as HTMLInputElement;
	const errorTag = document.querySelector("#city+small") as HTMLElement;
	const city = cityInput.value;
	const cityIsEmpty = city === "";


	if (cityIsEmpty) {
	 	 cityInput.classList.add("border-red-400", "dark:border-red-400");
	 	 cityInput.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "City is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (city === "") console.log("city is not valid");

	return city !== "";
}

function validateProvince(): boolean {
	const provinceInput = document.getElementById("province") as HTMLInputElement;
	const errorTag = document.querySelector("#province+small") as HTMLElement;
	const province = provinceInput.value;
	const provinceIsEmpty = province === "";

	if (provinceIsEmpty) {
	 	 provinceInput.classList.add("border-red-400", "dark:border-red-400");
	 	 provinceInput.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "Province is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (province === "") console.log("province is not valid");

	return province !== "";
}

function validatePostalCode(): boolean {
	const postalInput = document.getElementById("postal-code") as HTMLInputElement;
	const errorTag = document.querySelector("#postal-code+small") as HTMLElement;
	const postalCode = postalInput.value;
	const validPattern = /^[ABCEGHJ-NPRSTVXY][0-9][ABCEGHJ-NPRSTV-Z][ ]?[0-9][ABCEGHJ-NPRSTV-Z][0-9]$/i;

	const postaCodeIsEmpty = postalCode === "";
	const postaCodeIsValid = validPattern.test(postalCode);

	if (postaCodeIsEmpty || !postaCodeIsValid) {
		postalInput.classList.add("border-red-400", "dark:border-red-400");
		postalInput.scrollIntoView({behavior: "smooth", block: "center"});
		if (postaCodeIsEmpty) {
			errorTag.textContent = "Postal Code is required";
		} else if (!postaCodeIsValid) {
			errorTag.textContent = "Postal Code is invalid";
		}
		errorTag.classList.remove("hidden");
	}

	if (!validPattern.test(postalCode)) console.log("postal code is not valid");

	return validPattern.test(postalCode);
}

function validatePurpose(): boolean {
	const otherRadioBtn = document.getElementById("purpose-other") as HTMLInputElement;
	const otherInput = document.getElementById("purpose-other-text") as HTMLInputElement;
	const errorTag = document.querySelector("#purpose-other-text+small") as HTMLElement;
	const otherValue = otherInput.value;

	const otherPurposeIsEmpty = otherValue === "";

	if (otherRadioBtn.checked && otherPurposeIsEmpty) {
	 	 otherInput.classList.add("border-red-400", "dark:border-red-400");
	 	 otherInput.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "Value for \"other\" is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (!otherRadioBtn.checked || otherValue === "") console.log("purpose is not valid");


	return !(otherRadioBtn.checked && otherPurposeIsEmpty);
}

function validateMessage(): boolean {
	const messageArea = document.getElementById("message") as HTMLTextAreaElement;
	const errorTag = document.querySelector("#message+small") as HTMLElement;
	const message = messageArea.value;

	const messageIsEmpty = message === "";
	
	if (messageIsEmpty) {
	 	 messageArea.classList.add("border-red-400", "dark:border-red-400");
	 	 messageArea.scrollIntoView({behavior: "smooth", block: "center"});
	 	 errorTag.textContent = "Message is required";
	 	 errorTag.classList.remove("hidden");
	}

	if (message === "") console.log("message is not valid");

	return !messageIsEmpty;
}

</script>




